# 	
# 	 @@@@@@    @@@@@@   @@@@@@@  @@@@@@@    @@@@@@   @@@@@@@@@@    @@@@@@   @@@@@@@   @@@  @@@  @@@       @@@@@@@@   @@@@@@
# 	@@@@@@@@  @@@@@@@   @@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@@@@  @@@@@@@@  @@@@@@@@  @@@  @@@  @@@       @@@@@@@@  @@@@@@@
# 	@@!  @@@  !@@         @@!    @@!  @@@  @@!  @@@  @@! @@! @@!  @@!  @@@  @@!  @@@  @@!  @@@  @@!       @@!       !@@
# 	!@!  @!@  !@!         !@!    !@!  @!@  !@!  @!@  !@! !@! !@!  !@!  @!@  !@!  @!@  !@!  @!@  !@!       !@!       !@!
# 	@!@!@!@!  !!@@!!      @!!    @!@!!@!   @!@  !@!  @!! !!@ @!@  @!@  !@!  @!@  !@!  @!@  !@!  @!!       @!!!:!    !!@@!!
# 	!!!@!!!!   !!@!!!     !!!    !!@!@!    !@!  !!!  !@!   ! !@!  !@!  !!!  !@!  !!!  !@!  !!!  !!!       !!!!!:     !!@!!!
# 	!!:  !!!       !:!    !!:    !!: :!!   !!:  !!!  !!:     !!:  !!:  !!!  !!:  !!!  !!:  !!!  !!:       !!:            !:!
# 	:!:  !:!      !:!     :!:    :!:  !:!  :!:  !:!  :!:     :!:  :!:  !:!  :!:  !:!  :!:  !:!   :!:      :!:           !:!
# 	::   :::  :::: ::      ::    ::   :::  ::::: ::  :::     ::   ::::: ::   :::: ::  ::::: ::   :: ::::   :: ::::  :::: ::
# 	 :   : :  :: : :       :      :   : :   : :  :    :      :     : :  :   :: :  :    : :  :   : :: : :  : :: ::   :: : :
# 	
#                                             ¬© Copyright 2024
#
#                                    https://t.me/Den4ikSuperOstryyPer4ik
#                                                  and
#                                          https://t.me/ToXicUse
#
#                                    üîí Licensed under the GNU AGPLv3
#                                 https://www.gnu.org/licenses/agpl-3.0.html
#
# meta developer: @AstroModules
# meta banner: https://raw.githubusercontent.com/Den4ikSuperOstryyPer4ik/Astro-modules/main/Banners/BrawlStats.jpg
# requires: brawlstats

import brawlstats as bs
import requests

from .. import loader, utils


@loader.tds
class BrawlStatsInfo(loader.Module):
	'''Brawl Stars Players/Clubs information :)'''
	
	strings = {
		"name": "BrawlStatsInfo"
	}
	
	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"bs_api_token",
				None,
				doc="–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–π API-–¢–æ–∫–µ–Ω BrawlStarsAPI",
				validator=loader.validators.Hidden()
			)
		)
	
	def getip(self):
		ip = requests.get('https://api.myip.com/').json()["ip"]
		return ip
	
	async def client_ready(self, client, db):
		await client.send_message("me", "<b>–ú–æ–¥—É–ª—å –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n–í–∞—à IP-–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API-–¢–æ–∫–µ–Ω–∞ BrawlStars: <code>{}</code></b>".format(self.getip()))
		
		try:
			self.bsc = bs.Client(self.config["bs_api_token"]) if self.config["bs_api_token"] else None
		except Exception:
			self.bsc = None
	
	def get_bs_client(self):
		if self.bsc is None:
			self.bsc = bs.Client(self.config["bs_api_token"]) if self.config["bs_api_token"] else None
		return None
	
	@loader.command()
	async def get_my_ip(self, message):
		"""–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π IP-–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API-–¢–æ–∫–µ–Ω BrawlStarsAPI"""
		await utils.answer(message, "<b>–í–∞—à IP-–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API-–¢–æ–∫–µ–Ω–∞ BrawlStars: <code>{}</code></b>".format(self.getip()))
	
	@loader.command()
	async def set_bs_api_token(self, message):
		"""<api_token> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π API-–¢–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–¥—É–ª—è."""
		await self.allmodules.commands['fconfig'](
			await utils.answer(message, '{}fconfig BrawlStatsInfo bs_api_token {}'.format(self.get_prefix(), utils.get_args_raw(message)))
		)
		self.get_bs_client()
	
	def get_brawlers_names(self, text: str):
		names = {
			'SHELLY': "–®–ï–õ–õ–ò",
			'COLT': "–ö–û–õ–¨–¢",
			'BULL': "–ë–£–õ–õ",
			'BROCK': '–ë–†–û–ö',
			'RICO': '–†–ò–ö–û',
			'SPIKE': '–°–ü–ê–ô–ö',
			'BARLEY': '–ë–ê–†–õ–ò', 
			'JESSIE': '–î–ñ–ï–°–°–ò',
			'NITA': "–ù–ò–¢–ê",
			'DYNAMIKE': '–î–ò–ù–ê–ú–ê–ô–ö', 
			'EL PRIMO': '–≠–õ–¨ –ü–†–ò–ú–û',
			'MORTIS': '–ú–û–†–¢–ò–°',
			'CROW': '–í–û–†–û–ù',
			'POCO': '–ü–û–ö–û',
			'BO': '–ë–û',
			'PIPER': '–ü–ê–ô–ü–ï–†',
			'PAM': '–ü–≠–ú',
			'TARA': '–¢–ê–†–ê',
			'DARRYL': '–î–≠–†–†–ò–õ',
			'PENNY': '–ü–ï–ù–ù–ò',
			'FRANK': '–§–†–≠–ù–ö',
			'GENE': '–î–ñ–ò–ù',
			'TICK': '–¢–ò–ö',
			'LEON': '–õ–ï–û–ù',
			'ROSA': '–†–û–ó–ê', 
			'CARL': '–ö–ê–†–õ', 
			'BIBI': '–ë–ò–ë–ò', 
			'8-BIT': '8-–ë–ò–¢',
			'SANDY': '–°–≠–ù–î–ò', 
			'BEA': '–ë–ï–ê',
			'EMZ': '–≠–ú–ó',
			'MR. P': '–ú–ò–°–¢–ï–† –ü.', 
			'MAX': '–ú–ê–ö–°',
			'JACKY': '–î–ñ–ï–ö–ò',
			'GALE': '–ì–≠–ô–õ',
			'NANI': '–ù–ê–ù–ò',
			'SPROUT': '–°–ü–†–ê–£–¢',
			'SURGE': '–í–û–õ–¨–¢',
			'COLETTE': '–ö–û–õ–ï–¢–¢',
			'AMBER': '–ê–ú–ë–ï–†',
			'LOU': '–õ–£',
			'BYRON': '–ë–ê–ô–†–û–ù',
			'EDGAR': '–≠–î–ì–ê–†',
			'RUFFS': '–ì–ê–í–°',
			'STU': '–°–¢–£',
			'BELLE': '–ë–ï–õ–õ–¨',
			'SQUEAK': '–°–ö–£–ò–ö',
			'GROM': '–ì–†–û–ú',
			'BUZZ': '–ë–ê–ó–ó',
			'GRIFF': '–ì–†–ò–§–§',
			'ASH': '–≠–®',
			'MEG': '–ú–≠–ì',
			'LOLA': '–õ–û–õ–ê',
			'FANG': '–§–≠–ù–ì',
			'EVE': '–ï–í–ê',
			'JANET': '–î–ñ–ê–ù–ï–¢',
			'BONNIE': '–ë–û–ù–ù–ò',
			'OTIS': '–û–¢–ò–°',
			'SAM': '–°–≠–ú',
			'GUS': '–ì–ê–°',
			'BUSTER': '–ë–ê–°–¢–ï–†',
			'CHESTER': '–ß–ï–°–¢–ï–†',
			'GRAY': '–ì–†–ï–ô',
			'MANDY': '–ú–≠–ù–î–ò',
		}
		text_replaced = text
		for i, o in names.items():
			text_replaced = text_replaced.replace(i, o)
		
		return text_replaced
	
	def get_player_info(self, tag: str, raw: bool = False):
		self.get_bs_client()
		player = self.bsc.get_player(
			tag if not tag.startswith("#") else tag.replace("#", "").replace(" ", "")
		)
		return player if raw else f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ:\n–ù–∏–∫–Ω–µ–π–º: {player.name}\n–¢–µ–≥: <code>{player.tag}</code>\n–ö–æ–ª-–≤–æ –∫—É–±–∫–æ–≤ –≤—Å–µ–≥–æ: {player.trophies}\n–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –∫—É–±–∫–æ–≤: {player.highest_trophies}\n–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {player.exp_level}\n–ü–æ–±–µ–¥ 3x3: {player.x3vs3_victories}\n–û–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ–±–µ–¥: {player.solo_victories}\n–ü–∞—Ä–Ω—ã—Ö –ø–æ–±–µ–¥: {player.duo_victories}\n–ë—Ä–∞–≤–ª–µ—Ä–æ–≤(–ë–æ–π—Ü–æ–≤): {len(player.brawlers)}\n–¢–µ–≥ –∫–ª—É–±–∞: <code>{player.club.tag if player.club.tag else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—É–±.'}</code>\n–ò–º—è –ö–ª—É–±–∞: {player.club.name if player.club.name else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—É–±.'}</b>"
	
	def get_club_info(self, tag: str, raw: bool = False):
		self.get_bs_client()
		club = self.bsc.get_club(
			tag if not tag.startswith("#") else tag.replace("#", "").replace(" ", "")
		)
		return club if raw else f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ:\n–ò–º—è –∫–ª—É–±–∞: {club.name}\n–¢–µ–≥: <code>{club.tag}</code>\n–ö–æ–ª-–≤–æ –∫—É–±–∫–æ–≤ –≤—Å–µ–≥–æ: {club.trophies}\n–ú–∏–Ω. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –∫—É–±–∫–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞: {club.required_trophies}\n–û–ø–∏—Å–∞–Ω–∏–µ: {self.get_club_description(club.description)}\n–¢–∏–ø –∫–ª—É–±–∞: {club.type}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{self.get_club_members_info(club)}</b>"
	
	def get_club_members_info(self, club, full: bool = False):
		self.get_bs_client()
		def get_member_role(role: str):
			for i, o in {"vicePresident": "–í–∏—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç", "president": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", "member": "–£—á–∞—Å—Ç–Ω–∏–∫"}.items():
				role = role.replace(i, o)
			return role
				
		
		return "\n‚Äî‚Äî‚Äî‚Äî\n".join(
			[
				f"{i.name}‚Äî{get_member_role(i.role)} (<code>{i.tag}</code> | {i.trophies}) " for i in club.get_members()
			] if full else [
				f"{i.name}‚Äî{get_member_role(i.role)} (<code>{i.tag}</code>)" for i in club.get_members()
			]
		)
	
	def get_club_description(self, text: str):
		text_replaced = text
		for i in range(15):
			text_replaced = text_replaced.replace(f"c{i}", "code")
		
		return text_replaced
	
	@loader.command()
	async def bs_get_player(self, message):
		"""<#player_tag> <#player_tag2> -> –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ/–∏–≥—Ä–æ–∫–∞—Ö(—Ç–µ–≥–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑—ã–≤–∞—Ç—å)"""
		msg = await utils.answer(message, "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		
		args = utils.get_args_raw(message)
		info = []
		
		self.get_bs_client()
		
		if len(args.split(" ")) != 1:
			for player_tag in args.split(" "):
				info.append(self.get_player_info(player_tag))
			info = "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n".join(info)
		else:
			info = self.get_player_info(args)
			
		return await utils.answer(msg, info)
	
	@loader.command()
	async def bs_get_club(self, message):
		"""<#CLUB_TAG> -> –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ –ø–æ –µ–≥–æ #–¢–ï–ì–£"""
		msg = await utils.answer(message, "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		
		args = utils.get_args_raw(message)
		info = []
		info = self.get_club_info(args)
			
		return await utils.answer(msg, info)
	
	@loader.command()
	async def bs_get_club_members(self, message):
		"""<#CLUB_TAG> -> –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–ª—É–±–∞ –ø–æ –µ–≥–æ #–¢–ï–ì–£"""
		msg = await utils.answer(message, "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		
		args = utils.get_args_raw(message)
		info = f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{self.get_club_members_info(self.get_club_info(args, True), True)}"
		
		return await utils.answer(msg, info)
	
	@loader.command()
	async def bs_get_player_brawlers(self, message):
		"""<#player_tag> -> –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë—Ä–∞–≤–ª–µ—Ä–∞—Ö(–ë–æ–π—Ü–∞—Ö) –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ #–¢–ï–ì–£"""
		msg = await utils.answer(message, "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		
		args = utils.get_args_raw(message)
		
		player = self.get_player_info(args, True)
		
		brawlers = []
		for brawler in player.brawlers:
			brawlers.append(f"<b>–ò–º—è: {brawler.name}\n–ö—É–±–∫–æ–≤ –Ω–∞ –±–æ–π—Ü–µ: {brawler.trophies}\n–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –∫—É–±–∫–æ–≤ –Ω–∞ –±–æ–π—Ü–µ: {brawler.highest_trophies}\n–†–∞–Ω–≥: {brawler.rank}\n–°–∏–ª–∞: {brawler.power}")
		
		info = "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n".join(brawlers)
		info = self.get_brawlers_names(info)
		
		return await utils.answer(msg, info)
