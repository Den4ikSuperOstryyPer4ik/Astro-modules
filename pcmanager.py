__version__ = (1, 0, 0)
#               _             __  __           _       _
#     /\       | |           |  \/  |         | |     | |
#    /  \   ___| |_ _ __ ___ | \  / | ___   __| |_   _| | ___  ___
#   / /\ \ / __| __| '__/ _ \| |\/| |/ _ \ / _` | | | | |/ _ \/ __|
#  / ____ \\__ \ |_| | | (_) | |  | | (_) | (_| | |_| | |  __/\__ \
# /_/    \_\___/\__|_|  \___/|_|  |_|\___/ \__,_|\__,_|_|\___||___/
#
#               ¬© Copyright 2022
#
#      https://t.me/Den4ikSuperOstryyPer4ik
#                      and
#             https://t.me/ToXicUse
#
#       üîí Licensed under the GNU AGPLv3
#    https://www.gnu.org/licenses/agpl-3.0.html
#
# meta developer: @AstroModules

from .. import loader, utils

from telethon.tl.types import Message
from ..inline.types import InlineCall

class PCManagerMod(loader.Module):
	'''–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ —é–∑–µ—Ä–±–æ—Ç–∞'''
	strings = {"name": "PC-Manager"}

	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				'bot_username',
				None,
				doc=lambda: "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö"
			)
		)

	async def client_ready(self):
		self.lib = await self.import_lib(
			'https://raw.githubusercontent.com/ToXic2290/Hikka-moduless/main/AstroModules_Library.py',
			suspend_on_error=False,
		)


	@loader.command()
	async def addbot(self, message: Message):
		'''- –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞

 üíé –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'''
		await self.allmodules.commands["config"](
					await utils.answer(message, f"{self.get_prefix()}config PC-Manager")
				)
	@loader.command()
	async def tutor(self, message: Message):
		"""- —Ç—É—Ç–æ—Ä–∏–∞–ª –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"""
		await utils.answer(message, "<emoji document_id=5787237370709413702>‚öôÔ∏è</emoji> <b>–¢—É—Ç–æ—Ä–∏–∞–ª –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥—É–ª—è:</b>\n\n@PC_AM_Tutor\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç AstroModules ")

	@loader.command()
	async def pcoff(self, message: Message):
		"""- –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä""" 
		bot = self.config["bot_username"]
		call = await self.lib.message_g(f'üõë Shutdown',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n{call.text}')

	@loader.command()
	async def pcreboot(self, message: Message):
		"""- –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä"""
		bot = self.config["bot_username"]
		call = await self.lib.message_g(f'üîÑ Reboot',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n{call.text}')

	@loader.command()
	async def pcinfo(self, message: Message):
		"""- –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
		bot = self.config["bot_username"]
		call = await self.lib.message_q(f'üíª System Info',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n{call.text}')

	@loader.command()
	async def pcip(self, message: Message):
		"""- –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–π–ø–∏ –∞–¥—Ä–µ—Å–µ"""
		bot = self.config["bot_username"]
		call = await self.lib.message_q(f'üåê IP Info',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n{call.text}')

	@loader.command()
	async def pcscrin(self, message: Message):
		"""- —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"""
		bot = self.config['bot_username']
		call = await self.lib.message_g(f'/screenshot',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...')
		await message.respond(call)

	@loader.command()
	async def pcweb(self, message: Message):
		"""<—Å—Å—ã–ª–∫–∞> - –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
		bot = self.config['bot_username']
		args = utils.get_args_raw(message)
		call = await self.lib.message_q(f'/browse {args}',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n{call.text}\n\n–°—Å—ã–ª–∫–∞: {args}')

	@loader.command()
	async def pcwebscrin(self, message: Message):
		"""- —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã

üîë –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:"""
		bot = self.config['bot_username']
		call = await self.lib.message_g(f'/photo',
			bot,
			mark_read=True,
			delete=True
		)
		await utils.answer(message, f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–Ω–∏–º–∫–∞...')
		await message.respond(call)

	@loader.command()
	async def pcalert(self, message: Message):
		"""<—Å–æ–æ–±—â–µ–Ω–∏–µ> - –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ"""
		bot = self.config['bot_username']
		args = utils.get_args_raw(message)
		call = await self.lib.message_q(f'/alert {args}',
			bot,
			mark_read=True,
			delete=True
		)
		await message.respond(f'<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>[PC_Manager]</b> <emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji>\n\n{call.text}')
		await message.delete()
	
	@loader.command()
	async def pcvol(self, message: Message):
		"""- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º"""
		await self.inline.form(
			text="‚ÑπÔ∏è <b>[PC_Manager]</b> ‚ÑπÔ∏è\n\n<b>–ú–∏—à–∫–µ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏</b>",
			reply_markup=[
				[
					{
						"text": "10%",
						"callback": self.vol10
					},
					{
						"text": "20%",
						"callback": self.vol20
					},
					{
						"text": "30%",
						"callback": self.vol30
					},
				],
				[
					{
						"text": "40%",
						"callback": self.vol40
					},
					{
						"text": "50%",
						"callback": self.vol50
					},
					{
						"text": "60%",
						"callback": self.vol60
					},
				],
				[	
					{
						"text": "70%",
						"callback": self.vol70
					},
					{
						"text": "80%",
						"callback": self.vol80
					},
					{
						"text": "90%",
						"callback": self.vol90
					},
				],
				[	
					{
						"text": "‚¨ÜÔ∏è",
						"callback": self.volUp
					},			
					{
						"text": "100%",
						"callback": self.vol100
					},
					{
						"text": "‚¨áÔ∏è",
						"callback": self.volDown
					},
				],
				[{"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å", "action": "close"}],
			],
			message=message,
		)

	@loader.command()
	async def pcmedia(self, message: Message):
		"""- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π"""
		await self.inline.form(
			text="‚ÑπÔ∏è <b>[PC_Manager]</b> ‚ÑπÔ∏è\n\n<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞</b>",
			reply_markup=[
				[
					{
						"text": "‚è™",
						"callback": self.nazad
					},
					{
						"text": "‚èØ",
						"callback": self.pausa
					},
					{
						"text": "‚è©",
						"callback": self.vpered
					},
				],
				[{"text": "üö´ –ó–∞–∫—Ä—ã—Ç—å", "action": "close"}],
			],
			message=message,
		)

	async def nazad(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/key__prev')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def pausa(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/key__play')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vpered(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/key__next')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol10(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 10')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol20(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 20')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol30(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 30')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol40(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 40')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol50(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 50')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol60(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 60')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol70(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 70')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol80(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 80')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol90(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 90')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def vol100(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume 100')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def volUp(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume up')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)
	async def volDown(self, call: InlineCall):
		bot = self.config['bot_username']
		await self.client.send_message(f'{bot}', '/volume down')
		return await call.answer("–£—Å–ø–µ—à–Ω–æ!", show_alert=False)

																			# Tx...