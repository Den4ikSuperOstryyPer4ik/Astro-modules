# 	
# 	 @@@@@@    @@@@@@   @@@@@@@  @@@@@@@    @@@@@@   @@@@@@@@@@    @@@@@@   @@@@@@@   @@@  @@@  @@@       @@@@@@@@   @@@@@@
# 	@@@@@@@@  @@@@@@@   @@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@@@@  @@@@@@@@  @@@@@@@@  @@@  @@@  @@@       @@@@@@@@  @@@@@@@
# 	@@!  @@@  !@@         @@!    @@!  @@@  @@!  @@@  @@! @@! @@!  @@!  @@@  @@!  @@@  @@!  @@@  @@!       @@!       !@@
# 	!@!  @!@  !@!         !@!    !@!  @!@  !@!  @!@  !@! !@! !@!  !@!  @!@  !@!  @!@  !@!  @!@  !@!       !@!       !@!
# 	@!@!@!@!  !!@@!!      @!!    @!@!!@!   @!@  !@!  @!! !!@ @!@  @!@  !@!  @!@  !@!  @!@  !@!  @!!       @!!!:!    !!@@!!
# 	!!!@!!!!   !!@!!!     !!!    !!@!@!    !@!  !!!  !@!   ! !@!  !@!  !!!  !@!  !!!  !@!  !!!  !!!       !!!!!:     !!@!!!
# 	!!:  !!!       !:!    !!:    !!: :!!   !!:  !!!  !!:     !!:  !!:  !!!  !!:  !!!  !!:  !!!  !!:       !!:            !:!
# 	:!:  !:!      !:!     :!:    :!:  !:!  :!:  !:!  :!:     :!:  :!:  !:!  :!:  !:!  :!:  !:!   :!:      :!:           !:!
# 	::   :::  :::: ::      ::    ::   :::  ::::: ::  :::     ::   ::::: ::   :::: ::  ::::: ::   :: ::::   :: ::::  :::: ::
# 	 :   : :  :: : :       :      :   : :   : :  :    :      :     : :  :   :: :  :    : :  :   : :: : :  : :: ::   :: : :
# 	
#                                             ¬© Copyright 2024
#
#                                    https://t.me/Den4ikSuperOstryyPer4ik
#                                                  and
#                                          https://t.me/ToXicUse
#
#                                    üîí Licensed under the GNU AGPLv3
#                                 https://www.gnu.org/licenses/agpl-3.0.html
#
# meta developer: @AstroModules
# meta banner: https://raw.githubusercontent.com/Den4ikSuperOstryyPer4ik/Astro-modules/main/Banners/InlineBotManager.jpg

import logging

from .. import loader
from .. import utils as u

logger = logging.getLogger(__name__)


@loader.tds
class InlineBotManagerMod(loader.Module):
    '''Control over your Inline bot!'''

    strings = {
        "name": "InlineBotManager",
        "no_args": (
            "No arguments :( | Read, how to use the module, command: <code>{}>/code>"
        ),
        "...-set": (
            "<b>{} for your inline bot(@{}) successfully set to <code>{}</code></b>"
        ),
        "error": "An error has occurred.",
        "namea": "Name",
        "inline-text": "Inline-Text",
        "about-text": "About",
        "description-text": "Description",
        "help-mod": """<b><i>‚Ä¢<u>Instructions for the module:</u>
------------------------------------------------
‚Ä¢<u>Information about the module:</u>
    ‚Ä¢Module name --> <code>InlineBotManager</code>
    ‚Ä¢Module description --> <code>Control over your Inline bot!</code>
    ‚Ä¢Link to the module(to download) --> <code></code>
    ‚Ä¢Unload the module --> <code>{prefix}unloadmod InlineBotManager</code>
    ‚Ä¢Your inline botname --> <code>{}</code>
    ‚Ä¢Your inline bot username --> @{}
------------------------------------------------
‚Ä¢ Commands:
    ‚Ä¢ <code>{prefix}ibcheckname</code> --> check bot name to be: "<code>üåò Hikka Userbot of {your nickname}</code>"
    --------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetname </code><name> --> set a name for your Inline Bot
    Command example:
    <code>{prefix}ibsetname DSOP-UserBot</code>
    --------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetqtext </code><text> --> set text instead of "InlineQuery" for your Inline Bot
    Command example:
    <code>{prefix}ibsetqtext UserBot-Inline-Query</code>
    --------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetdescription </code><text> --> change the information Description the inline bot
    Command example:
    <code>{prefix}ibsetdescription DSOP-UserBot</code>
    --------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetabout </code><text> --> change the text about the information about the inline bot
    Command example:
    <code>{prefix}ibsetabout DSOP-UserBot-about</code>
------------------------------------------------</i></b>""",
        "check-yes": "<b>Bot name checked successfully!\nIt's correct.</b>",
        "check-no": (
            "<b>Your inline bot name(@{}) was successfully checked! Result: bot name"
            " didn't match account name, bot name was changed from <code>{}</code> to"
            " <code>{}</code></b>"
        ),
        "_cfg_check_name": (
            "Check and change the name of your inline bot after every restart?"
        ),
    }

    strings_ru = {
        "_cls_doc": """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–¥ —Å–≤–æ–∏–º Inline –±–æ—Ç–æ–º!""",
        "no_args": (
            "–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ :( | –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–¥—É–ª–µ–º, –∫–æ–º–∞–Ω–¥–æ–π:"
            " <code>{}</code>"
        ),
        "...-set": (
            "<b>{} –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–∞(@{}) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω(-–æ/-–∞) –Ω–∞"
            " <code>{}</code></b>"
        ),
        "namea": "–ò–º—è",
        "inline-text": "Inline-–¢–µ–∫—Å—Ç",
        "about-text": "–¢–µ–∫—Å—Ç –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        "description-text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
        "help-mod": """<b><i>‚Ä¢<u>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –º–æ–¥—É–ª—é:</u>
------------------------------------------------
‚Ä¢<u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ:</u>
    ‚Ä¢–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è --> <code>InlineBotManager</code>
    ‚Ä¢–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è --> <code>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–¥ —Å–≤–æ–∏–º Inline –±–æ—Ç–æ–º!</code>
    ‚Ä¢–°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥—É–ª—å(–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏) --> <code></code>
    ‚Ä¢–í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å --> <code>{prefix}unloadmod InlineBotManager</code>
------------------------------------------------
‚Ä¢–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ò–Ω–ª–∞–π–Ω-–ë–æ—Ç–µ:
    ------
    ‚Ä¢–ò–º—è –±–æ—Ç–∞ --> <code>{}</code>
    ----------------------
    ‚Ä¢–Æ–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ --> @{}
------------------------------------------------
‚Ä¢–ö–æ–º–∞–Ω–¥—ã:
    ‚Ä¢ <code>{prefix}ibcheckname</code> --> –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º—è –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ: "üåò Hikka Userbot of (–≤–∞—à –Ω–∏–∫-–Ω–µ–π–º)"
------------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetname </code><–∏–º—è> --> —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–Ω–ª–∞–π–Ω-–ë–æ—Ç–∞
    –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:
    <code>{prefix}ibsetname DSOP-UserBot</code>
------------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetqtext </code><—Ç–µ–∫—Å—Ç> --> —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ "InlineQuery" –¥–ª—è –≤–∞—à–µ–≥–æ –ò–Ω–ª–∞–π–Ω-–ë–æ—Ç–∞
    –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:
    <code>{prefix}ibsetqtext UserBot-Inline-Query</code>
------------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetdescription </code><—Ç–µ–∫—Å—Ç> --> –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–µ
    –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:
    <code>{prefix}ibsetdescription DSOP-UserBot</code>
------------------------------------------------
    ‚Ä¢ <code>{prefix}ibsetabout </code><—Ç–µ–∫—Å—Ç> --> –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–µ
    –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:
    <code>{prefix}ibsetabout DSOP-UserBot-about</code>
------------------------------------------------</i></b>""",
        "ib-help": """<b>----------------------
</b>""",
        "check-yes": "<b>–ò–º—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!\n–û–Ω–æ –≤–µ—Ä–Ω–æ–µ.</b>",
        "check-no": (
            "<b>–ò–º—è –≤–∞—à–µ–≥–æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–∞(@{}) –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–º—è –±–æ—Ç–∞"
            " –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏–º—è –±–æ—Ç–∞ –±—ã–ª–æ —Å–º–µ–Ω–µ–Ω–æ —Å"
            " <code>{}</code> –Ω–∞ <code>{}</code></b>"
        ),
        "_cfg_check_name": (
            "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –∏–º—è –≤–∞—à–µ–≥–æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞?"
        ),
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "check_name",
                False,
                lambda: self.strings("_cfg_check_name"),
                validator=loader.validators.Boolean(),
            )
        )

    @loader.command(ru_doc="--> –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–º–æ—â—å –ø–æ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é")
    async def inlinebothelpcmd(self, message):
        """--> Check help for this module"""
        await message.delete()
        name = self.bot.first_name
        username = self.bot.username
        await self.client.send_message(
            message.peer_id,
            self.strings("help-mod").format(
                name,
                username,
                prefix=self.get_prefix(),
            ),
        )

    @loader.command(ru_doc="<–∏–º—è> --> –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–Ω–ª–∞–π–Ω-–ë–æ—Ç–∞")
    async def ibsetnamecmd(self, message):
        """<name> --> change Name for your Inline-Bot"""
        args = u.get_args_raw(message)
        if not args:
            command = f"{self.get_prefix()}inlinebothelp"
            await u.answer(message, self.strings("no_args").format(command))
        else:
            async with self.client.conversation(self.botfather) as conv:
                await conv.send_message("/setname")
                await conv.send_message(f"@{self.inline.bot_username}")
                await conv.send_message(args)
                await conv.mark_read()

            await u.answer(
                message,
                self.strings("...-set").format(
                    self.strings("namea"), self.inline.bot_username, args
                ),
            )

    @loader.command(
        ru_doc="<—Ç–µ–∫—Å—Ç> --> –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ InlineQuery –¥–ª—è –≤–∞—à–µ–≥–æ –ò–Ω–ª–∞–π–Ω-–ë–æ—Ç–∞"
    )
    async def ibsetqtextcmd(self, message):
        """<text> --> change text in InlineQuery for your Inline-Bot"""
        args = u.get_args_raw(message)
        if not args:
            command = f"{self.get_prefix()}inlinebothelp"
            await u.answer(message, self.strings("no_args").format(command))
        else:
            async with self.client.conversation(self.botfather) as conv:
                await conv.send_message("/setinline")
                await conv.send_message(f"@{self.inline.bot_username}")
                await conv.send_message(args)
                await conv.mark_read()

            await u.answer(
                message,
                self.strings("...-set").format(
                    self.strings("inline-text"), self.inline.bot_username, args
                ),
            )

    @loader.command(ru_doc="<—Ç–µ–∫—Å—Ç> --> –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–µ")
    async def ibsetdescriptioncmd(self, message):
        """<description> --> change inline-bot description"""
        args = u.get_args_raw(message)
        if not args:
            command = f"{self.get_prefix()}inlinebothelp"
            await u.answer(message, self.strings("no_args").format(command))
        else:
            async with self.client.conversation(self.botfather) as conv:
                await conv.send_message("/setdescription")
                await conv.mark_read()
                await conv.send_message(f"@{self.inline.bot_username}")
                await conv.mark_read()
                await conv.send_message(args)
            await u.answer(
                message,
                self.strings("...-set").format(
                    self.strings("description-text"), self.inline.bot_username, args
                ),
            )

    @loader.command(ru_doc="<—Ç–µ–∫—Å—Ç> --> –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–Ω–ª–∞–π–Ω-–±–æ—Ç–µ")
    async def ibsetaboutcmd(self, message):
        """<about> --> change inline-bot about text"""
        args = u.get_args_raw(message)
        if not args:
            command = f"{self.get_prefix()}inlinebothelp"
            await u.answer(message, self.strings("no_args").format(command))
        else:
            async with self.client.conversation(self.botfather) as conv:
                await conv.send_message("/setabouttext")
                await conv.send_message(f"@{self.inline.bot_username}")
                await conv.send_message(args)
                await conv.mark_read()

            await u.answer(
                message,
                self.strings("...-set").format(
                    self.strings("about-text"), self.inline.bot_username, args
                ),
            )

    @loader.command(
        ru_doc="""-->–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º—è –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ: "üåò Hikka Userbot of {–≤–∞—à –Ω–∏–∫}" """
    )
    async def ibchecknamecmd(self, message):
        """-->check bot name to be: "üåò Hikka Userbot of {your nickname}" """
        bot_name = self.bot.first_name
        acc_name = self.acc.first_name
        norm_nameb = f"üåò Hikka Userbot of {acc_name}"
        if bot_name == norm_nameb:
            await u.answer(message, self.strings("check-yes"))
            logger.debug(self.strings("check-yes"))
        else:
            async with self.client.conversation(self.botfather) as conv:
                await conv.send_message("/setname")
                await conv.send_message(f"@{self.inline.bot_username}")
                await conv.send_message(norm_nameb)
                await conv.mark_read()

            logger.info(
                self.strings("check-no").format(self.bot.username, bot_name, norm_nameb)
            )
            await u.answer(
                message,
                self.strings("check-no").format(
                    self.inline.bot_username, bot_name, norm_nameb
                ),
            )

    async def client_ready(self, *_):
        self.botfather = "@BotFather"
        self.bot = await self.inline.bot.get_me()
        self.acc = await self.client.get_me()
        if self.config["check_name"]:
            m = await self.client.send_message("me", f"{self.get_prefix()}ibcheckname")
            await self.ibchecknamecmd(m)